# 并发服务器

## 一、多进程并发服务器：server.c

	1. Socket();		创建 监听套接字 lfd
	2. Bind()	绑定地址结构 Strcut scokaddr_in addr;
	3. Listen();	
	4. while (1) {

		cfd = Accpet();			阻塞接收客户端连接请求。
		
		pid = fork();			创建子进程
		
		if (pid == 0){			子进程 read(cfd) --- 小-》大 --- write(cfd)

			close(lfd);	关闭用于建立连接的套接字 lfd

			read()
			
			小--》大
			
			write()

		} else if （pid > 0） {	父进程

			close(cfd);	关闭用于与客户端通信的套接字 cfd	

			注册信号捕捉函数：SIGCHLD

			在回调函数中， 完成子进程回收 while （waitpid()）;
			
			contiue;
		}
	}
	
### 示例：多进程并发服务器的实现

## 二、多线程并发服务器： server.c 

	1. Socket();		创建 监听套接字 lfd

	2. Bind()		绑定地址结构 Strcut scokaddr_in addr;

	3. Listen();		

	4. while (1) {		

		cfd = Accept(lfd, );

		pthread_create(&tid, NULL, tfn, (void *)cfd);

		pthread_detach(tid);  	// pthead_join(tid, void **);  可单独创建一个新线程---专用于回收子线程。
	  }

	5. 子线程：

		void *tfn(void *arg) 
		{
			// close(lfd)			不能关闭。 主线程要使用lfd

			read(cfd)

			小--大

			write(cfd)

			pthread_exit（(void *)10）;	
		}

* 将地址结构清零：`memset(void* s, int c, size_t n)`和`bzero(void* s, size_t n)`

### 示例：多线程并发服务器的实现

## 三、服务器程序上传至外网服务器，并访问

```sheel
scp -r ./test/ oafz@192.168.252.128:/home/oafz/code 
```

# 多路IO转接服务器

多路IO转接服务器也叫做多任务IO服务器。该类服务器实现的主旨思想是：不再由应用程序自己监视客户端连接，而是由内核替应用程序监视文件。

![多路IO转接服务器](https://oafz-draw-bed.oss-cn-beijing.aliyuncs.com/img/%E5%A4%9A%E8%B7%AFIO%E8%BD%AC%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF.png)

## 四、select多路IO转接服务器

	原理：  借助内核， select 来监听， 客户端连接、数据通信事件。

	void FD_ZERO(fd_set *set);	--- 清空一个文件描述符集合。

		fd_set rset;

		FD_ZERO(&rset);

	void FD_SET(int fd, fd_set *set);	--- 将待监听的文件描述符，添加到监听集合中

		FD_SET(3, &rset);	FD_SET(5, &rset);	FD_SET(6, &rset);


	void FD_CLR(int fd, fd_set *set);	--- 将一个文件描述符从监听集合中 移除。

		FD_CLR（4， &rset）;

	int  FD_ISSET(int fd, fd_set *set);	--- 判断一个文件描述符是否在监听集合中。

		返回值： 在：1；不在：0；

		FD_ISSET（4， &rset）;
		
	int select(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout);

		nfds：监听的所有文件描述符中，最大文件描述符+1

		readfds： 读 文件描述符监听集合。	传入、传出参数

		writefds：写 文件描述符监听集合。	传入、传出参数		NULL

		exceptfds：异常 文件描述符监听集合	传入、传出参数		NULL

		timeout： 	> 0: 	设置监听超时时长。

				NULL:	阻塞监听

				0：	非阻塞监听，轮询
		返回值：

			> 0:	所有监听集合（3个）中， 满足对应事件的总数。

			0：	没有满足监听条件的文件描述符

			-1： 	errno

思路分析：

	int maxfd = 0；

	lfd = socket() ;			创建套接字

	maxfd = lfd；

	bind();					绑定地址结构

	listen();				设置监听上限

	fd_set rset， allset;			创建r监听集合

	FD_ZERO(&allset);				将r监听集合清空

	FD_SET(lfd, &allset);			将 lfd 添加至读集合中。

	while（1） {

		rset = allset；			保存监听集合
	
		ret  = select(lfd+1， &rset， NULL， NULL， NULL);		监听文件描述符集合对应事件。

		if（ret > 0） {							有监听的描述符满足对应事件
		
			if (FD_ISSET(lfd, &rset)) {				// 1 在。 0不在。

				cfd = accept（）；				建立连接，返回用于通信的文件描述符

				maxfd = cfd；

				FD_SET(cfd, &allset);				添加到监听通信描述符集合中。
			}

			for （i = lfd+1； i <= 最大文件描述符; i++）{

				FD_ISSET(i, &rset)				有read、write事件

				read（）

				小 -- 大

				write();
			}	
		}
	}

select优缺点：

	缺点：	监听上限受文件描述符限制。 最大 1024.

		检测满足条件的fd， 自己添加业务逻辑提高小。 提高了编码难度。

	优点：	跨平台。win、linux、macOS、Unix、类Unix、mips

	
	
	



























		
				
